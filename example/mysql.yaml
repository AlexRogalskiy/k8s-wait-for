---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: mysql-setup
  name: mysql-setup
spec:
  template:
    metadata:
      labels:
        app: mysql-setup
    spec:
      restartPolicy: Never
      initContainers:
      # - name: init-mysql
      #   image: busybox:1.28
      #   command: ['sh', '-c', "until nslookup mysql; do echo waiting for mysql; sleep 2; done"]
      - name: wait-for-mysql-pod
        image: k8s-wait-for
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mysql"
      - name: wait-for-mysql-service
        image: k8s-wait-for
        imagePullPolicy: IfNotPresent
        args:
          - "service"
          - "-lapp=mysql"
      - name: sleep
        image: busybox:1.28
        command: ['sh', '-c', "sleep 10"]
        imagePullPolicy: IfNotPresent
      containers:
      - name: mysql-query
        args: ["mysql", "--host=mysql", "--user=root", "--password=root", "--database=nylas", "--execute", "show tables;"]
        image: mysql-client
        imagePullPolicy: IfNotPresent
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: another-mysql-setup
  name: another-mysql-setup
spec:
  template:
    metadata:
      labels:
        app: another-mysql-setup
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-mysql-setup
        image: k8s-wait-for
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mysql-setup"
      containers:
      - name: busybox
        image: busybox:1.28
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', "echo Success"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pods-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: services-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["services"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
subjects:
- kind: User
  name: system:serviceaccount:default:default 
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role 
  name: pods-reader 
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-services
subjects:
- kind: User
  name: system:serviceaccount:default:default 
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role 
  name: services-reader 
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          args:
          - --character-set-server=utf8mb4
          - --innodb_log_buffer_size=32M
          - --innodb_log_file_size=80M
          - --max_allowed_packet=8M
          ports:
          - name: mysql
            containerPort: 3306
          env:
          - name: MYSQL_ROOT_PASSWORD
            value: root
          volumeMounts:
          - name: mysql-initdb
            mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE DATABASE nylas;
    USE nylas;
    CREATE TABLE test(
      id INT NOT NULL AUTO_INCREMENT,
      title VARCHAR(100) NOT NULL,
      PRIMARY KEY ( id )
    );
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP